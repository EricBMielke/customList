CustomList<T> - Operator Overload

Parameters:
	CustomList<T> list1- A list of int, strings, or doubles (based on what user decides) to stand as the list that will be subtracted from
	CustomList<T> list2- A list of int, strings, or doubles (based on what user decides) to compare against list1

Returns:
	CustomList<T> addedList - A list that is derived from list1, but the reciprocated objects that are in list2 have been removed from this list

Syntax:
	CustomList<T> endList = CustomList<T> firstList - CustomList<T>secondList

Example:

using System;
using CustomList;
using Microsoft.VisualStudio.TestTools.UnitTesting;

public class CustomListTests
public void Overload_SubtractLists_CountIsUpdatedOnNewList()
        {
            //Setting up the two lists that we will use for our subtraction operator overload
            CustomList<int> test1 = new CustomList<int>();
            CustomList<int> test2 = new CustomList<int>();
			//Creeating this expected variable to be our test standard
            int expected = 1;
            //Filling the two lists up with integers
            test1.Add(1);
            test1.Add(3);
            test2.Add(1);
            test2.Add(4);
			//Performing the function that will take away the 1 from list1 because it is contained in list2
            CustomList<int> result = test1 - test2;
			//The output of result is  {3}
            int actual = result.Count; 
            //Checking that that count is one, which means that the integer 1 was removed, because the previous count was two when we added in the two integers {1,3}
            Assert.AreEqual(expected, actual);


        }